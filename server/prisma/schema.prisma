// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:Baha1998@@localhost:3306/doctor"
}
enum Role {
  doctor
  user

}
model User {
  id          Int   @unique     @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String      @unique
  password    String
  phoneNumber String
  imageUrl    String
  appointments Appointment[]
  ratingsComments RatingsComment[]
  role  Role @default(user)
  blogs       Blog[]
  doctor      Doctor  @relation(fields: [doctorId], references: [id])
  doctorId    Int        @unique
  specialityId   Int   

  speciality Speciality @relation(fields: [specialityId], references: [id])
}
model Speciality {
  id          Int      @id @default(autoincrement())
  speciality  String
  doctors User[]
}

model Doctor {
  id          Int      @id @default(autoincrement())
  appointments Appointment[]
  user  User?

}

model Message {
  id      Int    @id @default(autoincrement())
  content String
}

model Appointment {
  id                  Int       @id @default(autoincrement())
  appointmentTime     DateTime
  status              AppointmentStatus @default(pending)
  paymentStatus       PaymentStatus    @default(unpaid)
  appointmentDepartment String
  doctorId             Int
  doctor              Doctor      @relation(fields: [doctorId], references: [id])
  userId              Int
  user                User        @relation(fields: [userId], references: [id])
}

model RatingsComment {
  id      Int    @id @default(autoincrement())
  rating  Int
  review  String
  imageSrc String
  name    String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
}

model Admin {
  id       Int     @id @default(autoincrement())
  username String  @unique
  email    String  @unique
  password String
}

model Payments {
  id          Int     @id @default(autoincrement())
  amount      Float
  paymentDate DateTime
}

model Blog {
  id        Int      @id @default(autoincrement())
  title     String
  text      String
  imageUrl  String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
}

model Comment {
  id      Int     @id @default(autoincrement())
  author  String
  comment String
  timestamp DateTime
  blogId  Int
  blog    Blog    @relation(fields: [blogId], references: [id])
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  price    Float
  imageUrl String
  category String
}

enum UserType {
  patient
  doctor
}

enum AppointmentStatus {
  pending
  accepted
  rejected
}

enum PaymentStatus {
  paid
  unpaid
}
model Patient {
  id       Int    @id @default(autoincrement())
  date      String
  name      String
  gender    String
  disease   String
  status    String
  image     String
}


model Doctorr{
  id            Int      @id @default(autoincrement())
  name          String
  gender        String
  specialization String
  occupation    String
  rating        Float
  image         String
  // Add other fields as needed
}

model UserReview {
  id        Int      @id @default(autoincrement())
  name      String
  occupation String
  review    String
  rating    Float
  image     String
}
model Todayapp {
  id        Int      @id @default(autoincrement())
  name    String
  date    String
  time    String
  type    String
  image   String
}